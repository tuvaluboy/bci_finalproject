% Start EEGLAB
[ALLEEG EEG CURRENTSET ALLCOM] = eeglab;

% Define file path (replace with your actual .mat file path)
file_path = 'C:\Users\user\Desktop\2022\IMPISA\Semester 2 - Spring\Brain Computer Interfaces\Final Project\SEED_IV\SEED_IV\eeg_raw_data\1\1_20160518.mat';

% Load .mat file
loaded_data = load(file_path);

% Extract the EEG data (replace 'YourEEGVariable' with the actual variable name)
EEG_data = loaded_data.cz_eeg1;

% Define number of channels and sampling rate (replace with your actual values)
nb_chan = 62;
srate = 200; % replace with your actual sampling rate

% Import data into EEGLAB
EEG = pop_importdata('dataformat','array','nbchan', nb_chan,'data','EEG_data','srate',srate,'pnts',0,'xmin',0);

% Update EEGLAB
[ALLEEG EEG CURRENTSET] = eeg_store(ALLEEG, EEG);
eeglab redraw;





% Load .mat file
loaded_data = load('C:\Users\user\Desktop\2022\IMPISA\Semester 2 - Spring\Brain Computer Interfaces\Final Project\SEED_IV\SEED_IV\eeg_raw_data\1\1_20160518.mat');
% Display the variables
disp(loaded_data);


% Select the channels you're interested in
selected_channels = EEG_data([1, 3, 8, 12], :);

% Visualize the selected EEG data
for i = 1:size(selected_channels, 1)
    figure;
    plot(selected_channels(i, :));
    title(['Channel ', num2str(i)]);
    xlabel('Time Points');
    ylabel('Amplitude');
end

% Parameters
channel_index = 1; % Choose a channel to analyze
NFFT = 2^nextpow2(length(selected_channels(channel_index, :))); % Next power of 2 from length of the data
f = srate/2*linspace(0,1,NFFT/2+1); % Frequency vector

% Raw data FFT
fft_raw = fft(selected_channels(channel_index, :), NFFT) / length(selected_channels(channel_index, :));
power_raw = 2*abs(fft_raw(1:NFFT/2+1));

% Filtered data FFT
fft_filtered = fft(filtered_data(channel_index, :), NFFT) / length(filtered_data(channel_index, :));
power_filtered = 2*abs(fft_filtered(1:NFFT/2+1));


---
% Parameters
channel_index = 1; % Choose a channel to analyze
NFFT = 2^nextpow2(length(selected_channels(channel_index, :))); % Next power of 2 from length of the data
f = srate/2*linspace(0,1,NFFT/2+1); % Frequency vector

% Raw data FFT
fft_raw = fft(selected_channels(channel_index, :), NFFT) / length(selected_channels(channel_index, :));
power_raw = 2*abs(fft_raw(1:NFFT/2+1));

% Filtered data FFT
fft_filtered = fft(channel1_original(channel_index, :), NFFT) / length(channel1_original(channel_index, :));
power_filtered = 2*abs(fft_filtered(1:NFFT/2+1));

--
% Keep a copy of the original data
EEG_original = EEG;

% Apply the ASR method
EEG = clean_rawdata(EEG, 5, -1, 0.8, 4, 20, 0.25);

Fs = 250;            % Sampling frequency                   
T = 1/Fs;
L = length(EEG.times);% Length of signal
t = (0:L-1)*T;        % Time vector
f = Fs*(0:(L/2))/L;

fft_raw_FP1 = get_fft(EEG_original.data(1,:), L);
fft_cleaned_FP1 = get_fft(EEG.data(1,:), L);

figure;
subplot(2,1,1);
plot(f,fft_raw_FP1);
title('Channel FP1 RAW');
xlabel("f (Hz)");
ylabel("|P1(f)|");
xlim([0, 100]);

subplot(2,1,2);
plot(f,fft_cleaned_FP1);
title('Channel FP1 CLEANED');
xlabel("f (Hz)");
ylabel("|P1(f)|");
xlim([0, 100]);



function fft_data = get_fft(X, L)
    Y = fft(X);
    P2 = abs(Y/L).^2;
    P1 = P2(1:L/2+1);
    P1(2:end-1) = 2*P1(2:end-1);
    fft_data = 10 * log10(P1); 
end

--
% Frequency sampling
Fs = 200; 
% Length of signal
L = length(EEG.times);
% Time vector
t = (0:L-1)/Fs; 

% FFT on channel 1 for the original data
Y_original = fft(EEG_original.data(1,:));
f_original = Fs*(0:(L/2))/L;
P2_original = abs(Y_original/L);
P1_original = P2_original(1:L/2+1);
P1_original(2:end-1) = 2*P1_original(2:end-1);

% FFT on channel 1 for the cleaned data
Y_cleaned = fft(EEG.data(1,:));
f_cleaned = Fs*(0:(L/2))/L;
P2_cleaned = abs(Y_cleaned/L);
P1_cleaned = P2_cleaned(1:L/2+1);
P1_cleaned(2:end-1) = 2*P1_cleaned(2:end-1);

% Plot the results for the original data
figure;
subplot(2,1,1);
plot(f_original, P1_original) 
title('Single-Sided Amplitude Spectrum of original data')
xlabel('f (Hz)')
ylabel('|P1(f)|')

% Plot the results for the cleaned data
subplot(2,1,2);
plot(f_cleaned, P1_cleaned) 
title('Single-Sided Amplitude Spectrum of cleaned data')
xlabel('f (Hz)')
ylabel('|P1(f)|')

---
% Select the first time frame
EEGsad = pop_select(EEG, 'point', [42:32 45:41]);

% Select the second time frame
EEGfear = pop_select(EEG, 'point', [49:25:00 51:00:00]);

% Select the third time frame
EEGhappy = pop_select(EEG, 'point', [41:07:00 45:06]);

---0
% Assuming your EEG structure is called EEG

% Convert your times to sample points
% This will depend on your sampling rate (srate). For instance, if your sampling rate is 250 Hz, 
% and your event 1 starts at 49:25:00 (or 177,900 seconds into the recording), 
% the sample point for this event would be 177900 * 250 = 44475000.

event1_start = 177900 * EEG.srate; % Replace with the correct start time for event 1
event2_start = ... % Similarly calculate for event 2 and 3
event3_start = ...

% Create a new event structure
new_event1 = struct('type', 'event1', 'latency', event1_start);
new_event2 = struct('type', 'event2', 'latency', event2_start);
new_event3 = struct('type', 'event3', 'latency', event3_start);

% Add these new events to the EEG structure
EEG.event(end+1) = new_event1;
EEG.event(end+1) = new_event2;
EEG.event(end+1) = new_event3;

% Check the result
EEG = eeg_checkset( EEG );

--
eegdata = rand(62, 200*100); % 32 channels of random activity (100 s sampled at 256 Hz).
eegdata(62,[42:32:200*100]) = 1; % simulating a stimulus onset every second
eegdata(62,[45:41:200*100]+round(rand*128)) = 2; % simulating reaction times about 500 ms after stimulus onsets

